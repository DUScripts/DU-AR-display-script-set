{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"scale = 0.025 --export: scale of the dammage repport\nscaleToggle = true\n\nsystem.print(\"---------------------------------------------------------------\")\nsystem.print(\"Welcome to use Jeronimo's Advanced Scripted Technologies!\")\n\nlocal function findConnectedSlots()\n    local slot = {}\n    for slotName in pairs(unit) do\n        slot = unit[slotName]\n        if type(slot)=='table' and unit[slotName].getClass ~= nil and slotName~='system' and slotName~='library' and slotName~='unit' and slotName~='export' then\n            --system.print(slot.getClass())\n            if string.sub(slot.getClass(),1,8) == \"CoreUnit\" then\n                core = slot\n                system.print(\"Core found\")\n            end\n            if string.sub(slot.getClass(),1,8) == \"Adjustor\" and slot.getTags() == \"Jero\" then\n                adjustor = slot\n                system.print(\"Jero tagged adjustor found\")\n            end\n        end\n    end\n    if core ~= nil and adjustor ~= nil then\n        system.print(\"Links initialisation complete\")\n    else\n        system.print(\"Links initialisation failed:\")\n        system.print(\"Please link programming board to an adjustor tagged JASS and the Core\")\n        unit.exit()\n    end\nend\nfindConnectedSlots()\n\n\nlocal elements = core.getElementIdList()\nallElements = {}\nlocal ei = 0\nlocal hub = false\nfor k, v in pairs(elements) do\n    ei = ei+1\n    allElements[ei] = {id = v, name = core.getElementDisplayNameById(v), text = \"0\", health = core.getElementHitPointsById(v), maxHealth = core.getElementMaxHitPointsById(v), localPos = core.getElementPositionById(v), pos = {0,0,0}}\nend  \n\n--unit.hideWidget()\nsystem.showScreen(1)\n\nsystem.print(\"Initialisation succesfull, check lua external parameters for more options!\")\nsystem.print(\"---------------------------------------------------------------\")","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"0"},{"code":"local sqrt, tan, rad, atan, cos, sin, format, concat, sort = math.sqrt, math.tan, math.rad, math.atan, math.cos, math.sin, string.format, table.concat, table.sort\nlocal MDX = system.getMouseDeltaX()*1.5\nlocal MDY = system.getMouseDeltaY()*1.5\nlocal pV = player.getVelocity()\nlocal pWP = player.getWorldPosition()\n\nlocal sw = system.getScreenWidth()\nlocal sh = system.getScreenHeight()\nlocal vFov = system.getCameraVerticalFov()\nlocal hFov = system.getCameraHorizontalFov()\nlocal near = 0.1\nlocal far = 100000000.0\nlocal aspectRatio = sh/sw\nlocal tanFov = 1.0/tan(rad(vFov)*0.5)\nlocal field = -far/(far-near)\nlocal af = aspectRatio*tanFov\nlocal nq = near*field\nlocal camPv3 = vec3(system.getCameraPos())\nlocal camWP = system.getCameraWorldPos()\nlocal camWPv3 = vec3(camWP)\nlocal camWPx, camWPy, camWPz = camWP[1], camWP[2], camWP[3]\nlocal camWF = system.getCameraWorldForward()\nlocal camWFv3 = vec3(camWF)\nlocal camWFx, camWFy, camWFz = camWF[1], camWF[2], camWF[3]\nlocal camWR = system.getCameraWorldRight()\nlocal camWRx, camWRy, camWRz = camWR[1], camWR[2], camWR[3]\nlocal camWU = system.getCameraWorldUp()\nlocal camWUx, camWUy, camWUz = camWU[1], camWU[2], camWU[3]\n\nlocal cWP = construct.getWorldPosition()\nlocal cWPx, cWPy, cWPz = cWP[1], cWP[2], cWP[3]\nlocal cWOU = construct.getWorldOrientationUp()\nlocal cWOUx, cWOUy, cWOUz = cWOU[1], cWOU[2], cWOU[3]\nlocal cWOF = construct.getWorldOrientationForward()\nlocal cWOFx, cWOFy, cWOFz = cWOF[1], cWOF[2], cWOF[3]\nlocal cWOR = construct.getWorldOrientationRight()\nlocal cWORx, cWORy, cWORz = cWOR[1], cWOR[2], cWOR[3]\nlocal mPP = player.getPosition()\nlocal mPPx, mPPy = mPP[1], mPP[2]\n\nlocal adjPos = adjustor.getPosition()\nlocal adjPosx, adjPosy, adjPosz = adjPos[1], adjPos[2], adjPos[3]\n\nlocal posX, posY, posZ = 0, 0, 0\nlocal vx, vy, vz = 0, 0, 0\nlocal sx, sy, sz = 0, 0, 0\nlocal sPX, sPY = 0\nlocal dist = 0\n\nlocal function vectorLen(x,y,z)\n    return sqrt(x * x + y * y + z * z)\nend\n\nlocal function local2World(vx,vy,vz)\n    x = vx * cWORx + vy * cWOFx + vz * cWOUx + cWPx\n    y = vx * cWORy + vy * cWOFy + vz * cWOUy + cWPy\n    z = vx * cWORz + vy * cWOFz + vz * cWOUz + cWPz\n    return x,y,z\nend        \n    \nlocal function projection2D()\n    vx = posX * camWRx + posY * camWRy + posZ * camWRz\n    vy = posX * camWFx + posY * camWFy + posZ * camWFz\n    vz = posX * camWUx + posY * camWUy + posZ * camWUz\n    sx = (af * vx)/vy\n    sy = ( -tanFov * vz)/vy\n    sz = ( -field * vy + nq)/vy\n    sPX, sPY = (sx+1)*sw*0.5, (sy+1)*sh*0.5 -- screen pos X Y\n    dist = sqrt(posX*posX + posY*posY + posZ*posZ) -- distance from camera to pos\nend\n\n\nlocal SVGT = {}\nlocal svgi = 0\n \nlocal pCx, pCy, pCz = 0,0,0\nlocal color = \"skyblue\"\nlocal health = 100\nlocal size = 20\n\nfor i, v in ipairs(allElements) do\n    if scaleToggle == true then\n        size = 20\n        pCx, pCy, pCz = local2World(v.localPos[1]*scale+adjPosx, v.localPos[2]*scale+adjPosy, v.localPos[3]*scale+adjPosz+0.5)   \n    else\n        size = 200\n        pCx, pCy, pCz = local2World(v.localPos[1], v.localPos[2], v.localPos[3])    \n    end\n    posX = pCx - camWPx\n    posY = pCy - camWPy\n    posZ = pCz - camWPz\n    projection2D()\n\n    health = (core.getElementHitPointsById(v.id)/v.maxHealth)*100\n\n    if sz < 1 and sPX > 0 and sPX < sw and sPY > 0 and sPY < sh then\n        if health >= 100 then color = \"skyblue\"\n        elseif health < 100 then color = \"gold\"\n        elseif health < 10 then color = \"red\"\n        end\n        svgi = svgi + 1\n        SVGT[svgi] = format('<circle cx=\"%.2f\" cy=\"%.2f\" r=\"%.2f\" stroke=\"none\" stroke-width=\"1\" fill=\"%s\" fill-opacity=\"0.5\"/>',\n                    sPX,sPY,1/dist*size,color)\n    end\nend    \n\nlocal SVG = concat(SVGT)\n--system.print(#SVGT)\nlocal html = [[\n<style>\nsvg {\nposition:absolute;\ntop:0px;\nleft:0px;\n}\n</style>\n<div>\n<svg viewBox=\"0 0 ]].. sw ..[[ ]].. sh ..[[\">\n]].. SVG ..[[\n</svg> \n</div>\n]]\n\nsystem.setScreen(html)\n--system.print(\"update\")\n","filter":{"args":[],"signature":"onUpdate()","slotKey":"-4"},"key":"1"},{"code":"scaleToggle = not scaleToggle","filter":{"args":[{"value":"lalt"}],"signature":"onActionStart(action)","slotKey":"-4"},"key":"2"}],"methods":[],"events":[]}