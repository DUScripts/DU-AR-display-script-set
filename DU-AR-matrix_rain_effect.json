{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"--system.print(\"---------------------------------------------------------------\")\n--system.print(\"Welcome to use JAST, Jeronimo's Advanced Scripted Technologies!\")\n\nlocal function findConnectedSlots()\n    local slot = {}\n    for slotName in pairs(unit) do\n        slot = unit[slotName]\n        if type(slot)=='table' and unit[slotName].getClass ~= nil and slotName~='system' and slotName~='library' and slotName~='unit' and slotName~='export' then\n            --system.print(slot.getClass())\n            if string.sub(slot.getClass(),1,8) == \"CoreUnit\" then\n                core = slot\n                --system.print(\"Core found\")\n            end\n        end\n    end\n    if core ~= nil then\n        --system.print(\"Links initialisation complete\")\n    else\n        system.print(\"Links initialisation failed:\")\n        system.print(\"Please link programming board to the Core\")\n        unit.exit()\n    end\nend\nfindConnectedSlots()\n\n--unit.hideWidget()\nsystem.showScreen(1)\nlocal cos, sin, max, min, random = math.cos, math.sin, math.max, math.min, math.random\nlocal cWP = construct.getWorldPosition()\nlocal cWPx, cWPy, cWPz = cWP[1], cWP[2], cWP[3]\nlocal cWOU = construct.getWorldOrientationUp()\nlocal cWOUx, cWOUy, cWOUz = cWOU[1], cWOU[2], cWOU[3]\nlocal cWOF = construct.getWorldOrientationForward()\nlocal cWOFx, cWOFy, cWOFz = cWOF[1], cWOF[2], cWOF[3]\nlocal cWOR = construct.getWorldOrientationRight()\nlocal cWORx, cWORy, cWORz = cWOR[1], cWOR[2], cWOR[3]\nlocal function local2World(vx,vy,vz)\n    x = vx * cWORx + vy * cWOFx + vz * cWOUx + cWPx\n    y = vx * cWORy + vy * cWOFy + vz * cWOUy + cWPy\n    z = vx * cWORz + vy * cWOFz + vz * cWOUz + cWPz\n    return x,y,z\nend \n\ngrassHeight = 0.5\nsvgColor = \"orange\"\nmarkers = {}\nmarkersSpeed = {}\nmarkersOpacity = {}\nmarkersOffset = {}\ntextLength = {}\nlocal maxMarkers = 200\nlocal boxSize = 7.75\nlocal maxSpread = 20\nlocal sign = {-1, 1}\nlocal p = 100\nfor i=1, maxMarkers, 1 do\n      markers[i] = {random(-boxSize*p,boxSize*p)/p,\n                  random(-boxSize*p,boxSize*p)/p,\n                  0}\nend\n--for i=1, maxGrass, 1 do\n--      grass[i] = {sign[random(1,2)]*random(boxSize*p,maxSpread*p)/p,\n--                  sign[random(1,2)]*random(boxSize*p,maxSpread*p)/p,\n--                  -boxSize}\n--end\n\nlocal x, y, z = 0, 0, 0\nfor i, v in ipairs(markers) do\n    x, y, z = local2World(v[1],v[2],v[3])\n    markers[i] = {x, y, z}\n    markersSpeed[i] = random(10,100)/1000 \n    markersOpacity[i] =  random(10,90)/100\n    markersOffset[i] = random(0,80)/10\n    textLength[i] = random(3,10)\nend \n\n\n\n--system.print(\"Initialisation succesfull, check lua external parameters for more options!\")\n--system.print(\"---------------------------------------------------------------\")","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"0"},{"code":"local sqrt, tan, rad, atan, cos, sin, format, concat, sort, random = math.sqrt, math.tan, math.rad, math.atan, math.cos, math.sin, string.format, table.concat, table.sort, math.random\nlocal MDX = system.getMouseDeltaX()*0.1\nlocal MDY = system.getMouseDeltaY()*0.1\nlocal pV = player.getVelocity()\nlocal pWP = player.getWorldPosition()\n\n\nlocal sw = system.getScreenWidth()\nlocal sh = system.getScreenHeight()\nlocal vFov = system.getCameraVerticalFov()\nlocal hFov = system.getCameraHorizontalFov()\nlocal near = 0.1\nlocal far = 100000000.0\nlocal aspectRatio = sh/sw\nlocal tanFov = 1.0/tan(rad(vFov)*0.5)\nlocal field = -far/(far-near)\nlocal af = aspectRatio*tanFov\nlocal nq = near*field\nlocal camPv3 = vec3(system.getCameraPos())\nlocal camWP = system.getCameraWorldPos()\nlocal camWPv3 = vec3(camWP)\nlocal camWPx, camWPy, camWPz = camWP[1], camWP[2], camWP[3]\nlocal camWF = system.getCameraWorldForward()\nlocal camWFv3 = vec3(camWF)\nlocal camWFx, camWFy, camWFz = camWF[1], camWF[2], camWF[3]\nlocal camWR = system.getCameraWorldRight()\nlocal camWRx, camWRy, camWRz = camWR[1], camWR[2], camWR[3]\nlocal camWU = system.getCameraWorldUp()\nlocal camWUx, camWUy, camWUz = camWU[1], camWU[2], camWU[3]\n\nlocal cWP = construct.getWorldPosition()\n--local cWPv3 = vec3(core.getConstructWorldPos())\nlocal cWPx, cWPy, cWPz = cWP[1], cWP[2], cWP[3]\nlocal cWOU = construct.getWorldOrientationUp()\nlocal cWOUx, cWOUy, cWOUz = cWOU[1], cWOU[2], cWOU[3]\nlocal cWOF = construct.getWorldOrientationForward()\nlocal cWOFx, cWOFy, cWOFz = cWOF[1], cWOF[2], cWOF[3]\nlocal cWOR = construct.getWorldOrientationRight()\nlocal cWORx, cWORy, cWORz = cWOR[1], cWOR[2], cWOR[3]\nlocal mPP = player.getPosition()\nlocal mPPx, mPPy = mPP[1], mPP[2]\n\nlocal posX, posY, posZ = 0, 0, 0\nlocal vx, vy, vz = 0, 0, 0\nlocal sx, sy, sz = 0, 0, 0\nlocal sPX, sPY = 0\nlocal dist = 0   \n    \nlocal function projection2D()\n    -- matrix resolution\n    vx = posX * camWRx + posY * camWRy + posZ * camWRz\n    vy = posX * camWFx + posY * camWFy + posZ * camWFz\n    vz = posX * camWUx + posY * camWUy + posZ * camWUz\n    -- 2D projection\n    sx = (af * vx)/vy\n    sy = ( -tanFov * vz)/vy\n    sz = ( -field * vy + nq)/vy\n    sPX, sPY = (sx+1)*sw*0.5, (sy+1)*sh*0.5 -- screen pos X Y\n    dist = sqrt(posX*posX + posY*posY + posZ*posZ) -- distance from camera to pos\nend\n\n\nlocal SVG = {}\nlocal ind = 0\nlocal pCx, pCy, pCz = 0,0,0\nlocal tempSVG1 = \"\"\nlocal tempSVG2 = \"\"\nlocal T = {\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"}\nlocal size = 0\n--➀➁➂➃➄➅➆➇➈➉\n--➊➋➌➍➎➏➐➑➒➓\n--Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ  Ⓨ  Ⓩ\n--▲◣◢◥▼△▽⊿◤◥△▴▵▶▷▸▹►▻▼▽▾▿◀◁◂◃◄◅\n--♚ ♛ ♜ ♝ ♞ ♟\n--♔ ♕ ♖ ♗ ♘ ♙\n--☚ ☛ ☜ ☝ ☞ ☟\n--☩ ☨ ☦ ✙ ✚ ✛ ✜ ✝ ✞ ✠\n--✦ ★ ☆ ✰ ✮ ✯ ❇ ❈ ❅ ❄ ❆ ╰☆╮ ❉ ۞ \n--❃ ❀ ✿ ❁ ✾\n--♪ ♫ ♩ ♬ ♭ ♮ ♯\n--☼ ☀ ☁ ☂ ☃ ☄ ☾ ☽ ❄ ๑ ☠ ☭ ☄ ♆ ✌ ☢ ☣ ☮ ☯\n--☯ ✡ ☨ ✞ ✝ ☮ ☥ ☦ ☧ ☩ ☪ ☫ ☬ ☭  卐\n--♋ ♂ ♀ ☿ ❤ ❥ 웃 유 ♡\n--☹ ☺ ☻ ✓ ✔ ✕ ✖ ◧ ◨ ◩ ◪ ◫ ◬ ◭ ◮ ◯ ◰ ◱ ◲ ◳ ◴ ◵ ◶ ◷ ◸ ◹ ◺ ◻ ◼ ◽ ◾ ◿\n--┌ ┍ ┎ ┏ ┐ ┑ ┒ ┓ └ ┕ ┖ ┗ ┘ ┙ ┚ ┛ ├ ┝ ┞ ┟ ┠ ┡ ┢ ┣ ┤ ┥ ┦ ┧ ┨ ┩ ┪ ┫ ┬ ┭ ┮ ┯ ┰ ┱ ┲ ┳ ┴ ┵ ┶ ┷ ┸ ┹ ┺ ┻ ┼ ┽ ┾ ┿ ╀ ╁ ╂ ╃ ╄ ╅ ╆ ╇ ╈ ╉ ╊ ╋ ╌ ╍ ╎ ╏ ═ ║ ╒ ╓ ╔ ╕ ╖ ╗ ╘ ╙ ╚ ╛ ╜ ╝ ╞ ╟ ╠ ╡ ╢ ╣ ╤ ╥ ╦ ╧ ╨ ╩ ╪ ╫ ╬\n--❃ ❂ ○ ◎ ● ◯ ◕ ◔ ◐ ◑ ☢ ⊗ ⊙ ◘ ◙ ▤▥▦▧▨▩ ♤ ♧ ♡ ⊙ ✪ ✲\n--← ↑ → ↓ ↔ ↕ ↖ ↗ ↘ ↙ ↚ ↛ ↜ ↝ ↞ ↟ ↠ ↡ ↢ ↣ ↤ ↥ ↦ ↧ ↨ ⇎ ⇏ ⇐ ⇑ ⇒ ⇓ ⇔ \nfor i, entry in ipairs(markers) do\n    markersOffset[i] = markersOffset[i] > -8 and markersOffset[i]-markersSpeed[i] or 1\n    pCx, pCy, pCz = entry[1]+markersOffset[i]*cWOUx, entry[2]+markersOffset[i]*cWOUy, entry[3]+markersOffset[i]*cWOUz\n    posX = pCx - camWPx\n    posY = pCy - camWPy\n    posZ = pCz - camWPz\n    projection2D()\n    if sz < 1 and sPX > 0 and sPX < sw and sPY > 0 and sPY < sh then \n        size = 300/dist\n        tempSVG1 = [[<text x=\"]]..sPX..[[\" y=\"]]..sPY..[[\" style=\"font-size:]].. size ..[[; fill:DeepSkyBlue; text-anchor: middle; font-family: Play; fill-opacity:]].. markersOpacity[i] ..[[\">]]\n        for i2=0, textLength[i], 1 do\n            tempSVG1 = tempSVG1 .. [[<tspan x=\"]]..sPX..[[\" dy=\"]].. 220/dist ..[[\">]].. T[random(1,36)] ..[[</tspan>]]\n        end            \n        tempSVG1 = tempSVG1 .. [[</text>]]\n        ind = ind + 1\n        SVG[ind] = tempSVG1\n    end \nend\n    \nlocal html = [[\n<style>\nsvg {\nposition:absolute;\ntop:0px;\nleft:0px;\n}\n</style>\n<div>\n<svg viewBox=\"0 0 ]].. sw ..[[ ]].. sh ..[[\">\n]].. concat(SVG) ..[[\n</svg>\n</div>\n]]\n\nsystem.setScreen(html)\n--system.print(\"update\")\n","filter":{"args":[],"signature":"onUpdate()","slotKey":"-4"},"key":"1"}],"methods":[],"events":[]}